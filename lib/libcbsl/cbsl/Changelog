2016-06-07  12h00m aoliveira    antonio.oliveira@withus.pt
NEW Mutex now supports recursive mutexes as well
NEW removed cancel() method from class Thread
NEW Added join() method to class Thread
NEW added timestampInMillis() static method to class TimeSpec
NEW added timedWait() method do class WaitCondition
CHG Logger output now prints linear timestamp instead of formatted date&time
FIX dangerous 'extern "C"' definition in logger.h caused crosstalk with files
FIX Runnable interface was not usable - deleted destructor
FIX RunnerPool had duplicate runner entries in "ready" list upon initialization
FIX char array subscript in base64 encoder
fixes #2180

2011-10-31  09h28m  aoliveira   antonio.oliveira
  * Reverted to default build as "Debug"
  * Removed rwlock.cpp - this is now a header-only class

2011-10-31  14h42m  aoliveira   antonio.oliveira@withus.pt
  * Default build configuration changed to "Release With Debug Information"
  * Small documentation improvement.

2011-09-08  15h51m  aoliveira   antonio.oliveira@withus.pt
  * ThreadPoolWorker no longer relies in the boost::signals2 class
  * ThreadPoolTask no longer relies in the boost::signals2 class. Instead
    of emitting a signal 'sigTaskNeedsWork(task*)', now implementations
    simply call method 'void requestWork()'

2011-09-05  11h03m  aoliveira   antonio.oliveira@withus.pt
  * Updated the doxyfile configuration.
  * The Thread Pool now doesn't allow a certain task running in more than
    one worker simultaneously.
  * ThreadPool::addTask() is now also protected by the ThreadPool Mutex.
  * Fixed a bug that caused the pointer to the worker assigned to a certain
    ThreadPoolTask not to be set to 0 when that task completed.
  * The ThreadPoolWorker now detects if it was woken by a signal handler.
  * Added the getWorker() method to ThreadPoolTask base class

2011-07-21  14h44m  aoliveira   antonio.oliveira@withus.pt
  * Modified the build system to allow the build to run without any source
    changes.

2011-06-14  10h31m  aoliveira   antonio.oliveira@withus.pt
  * added function logger_stream()

2011-04-15  16h52m  aoliveira   antonio.oliveira@withus.pt
  * Removed module pti_log
  * Created module logger, based on previous pti_log but with many
    enhancements.
  * Full code cleanup:
    - Removed all references to pti_log()
    - Some modules print log messages directly into stderr.

2011-03-28  10h35m  aoliveira   antonio.oliveira@withus.pt
  * ThreadPool , ThreadPoolWorker:
    - The connection information is now kept on the ThreadPoolWorker class.

2011-03-29  10h14m  aoliveira   antonio.oliveira@withus.pt
  * ThreadPool, ThreadPoolTask:
    - The connection information is now kept in the ThreadPoolTask base class
      instead of in the ThreadPool. This greatly simplifies connection
      management because the connection is automatically closed when the task
      is destructed. This requires that the tasks are deleted first, or that
      the tasks don't request any work after destruction of the thread pool.

2011-03-23  16h00m  aoliveira   antonio.oliveira@withus.pt
  * pti_log:
    - It is now possible to define the stream  on which log messages are
      written into.
    - new functions: pti_log_init() pti_log_set_stream()

2011-03-07  11h04m  aoliveira   antonio.oliveira@withus.pt
  * Thread:
    - Fixed an issue where the cancel() method had no effect on the Thread.
    - New Threads can now be made cancelable or not on startup.
    - New Threads can configure if cancelation is asynchonous or deferred
  * UdpSocket:
    - Check for cancelation immediately after the attempt to read data
    - If graceful stop fails, try to cancel the thread before quitting.

2011-02-01  11h38m  aoliveira   antonio.oliveira@withus.pt
  * Thread: Added method cancel()
            Threads are now created as joinable instead of as detached.
  * UdpSocket:  stopServer() is now able to force stop the server and waits
                for termination of the thread before exiting.
                Removed old comments.
  * Timer:  Cosmetic changes: the timeout signals't type is now typedef'ed

2011-01-28  12h08   aoliveira   antonio.oliveira@withus.pt
  * Created Cksum::IeeeCrc32::crc32Start()
    Cksum::IeeeCrc32::crc32Update() and Cksum::IeeeCrc32::crc32Finalize()
    This allows incremental calculation of CRC values.

2011-01-14  18h40m  aoliveira   antonio.oliveira@withus.pt
  * ThreadPoolWorker::sigTaskComplete is now sigTaskReturn. Meaning changed
    to a signal that is emited whenever a task returned from execution of
    one action.
  * ThreadPoolWorker no longer checks ThreadPoolTask::needWork to act upon.
    This caused tasks to be enqueued almost twice than needed and required
    protection mechanisms on the tasks (which are recommended anyway)
  * ThreadPool::onTaskComplete() is now onTaskReturn().
  * Added doxygen documentation to ThreadPool::onTaskReturn()
  
2011-01-14  12h33m  aoliveira   antonio.oliveira@withus.pt
  * Added pure virtual method bool ThreadPoolTask::needWork()
  * Reduced number of headers pulled in by threadpoolworker.h
  * Adjusted verbosity of some messages in ThreadPoolWorker.cpp
  * Don't use the return value of tasks in ThreadPoolWorker.
  * When a task returns, check if it needs work and enqueue it as needed
    (this still needs testing and may be eliminated in the future)
  * Added sigTaskNeedsWork to ThreadPoolTask.
  * TheadPoolTask::execute() now returns 'void'
  * Added ThreadPool::addTask. Tasks now need to be previously added to the
    Thread Pool before they can be executed.
  * ThreadPool now holds a list of all tasks it owns and their signal
    connections.
  * Adjusted verbosity of messages in ThreadPool
  * one-shot timers didn't stop on first expiration and behaved like continuous
    timers.

2010-11-24  13h53m  aoliveira   antonio.oliveira@withus.pt
* Added file pticommon.h ( was missing from SVN )
* Removed warning in Timer::isRunning() about accessing the timer from a 
  different thread.

2010-11-19  10h59m  aoliveira   antonio.oliveira@withus.pt
* deleted the xlsignals library. The library wasn't thread-safe and triggered
  invalid reads and writes under valgrind.
  files deleted: xlslog.hpp, xlsignal.h, xlptr.h, xlobject.h, baseobject.h,
  baseobject.cpp
* Added an include path from the target directory if there's a custom target
  defined in extraconfig.
* UdpSocket:
  - Use boost::signals2 instead of xlsignals for signal emission
* Timer:
  - Use boost::signals2 instead of xlsignals for signal emission
* ThreadPoolWorker:
  - Use boost::signals2 instead of xlsignals for signal emission
* ThreadPoolTask:
  - No longer derives from XL::Object
* ThreadPool:
  - Use boost::signals2 instead of xlsignals for signal emission
  - Keep track of the connections and disconnect them before destruction
  (fix invalid reads and writes)
* Thread:
 - No longer derives from XL::Object

2010-11-12  10h59m  aoliveira   antonio.oliveira@withus.pt
* ThreadPoolWorker:
 - The constructor now takes a mandatory parameter with a pointer to the
   parent pool
 - BUG: an enqueues task from within itself would lose the pointer to the
   worker is was assigned to as it left the current worker thread.
* ThreadPoolTask:
 - execute() now returns a state which informs the thread pool if the task
   needs to continue execution or not when it's current execution cycle ends.
* ThreadPool:
 - BUG: The ThreadPool couldn't receive signals, added inheritance from
   XL::Object
 - BUG: Newly created workers' signal sigTaskComplete was left unconnected
   from its handler in the thread pool
 - BUG: when a worker was freed by a task, the pool didn't append it to the
   list of idle workers on the signal handler and the worker was lost forever.
 - Added some debug code.
* cksum/
 - Added new module
 - Added IeeeCrc32 class

2010-11-09  14h43m  aoliveira   antonio.oliveira@withus.pt
* Pti::Thread:
 + Add new method - deliverSignal() - deliver a signal to the thread
* Doxyfile:
 - Updated configuration.
 - Generate documentation in doc/libpti
 - Update program name to libpti
* CMakeLists.txt
 - Added new ThreadPool related files.
 - Ordered header files in copy files target
 - Added target to install cksum module related files
* ThreadPool, ThreadPoolWorker, ThreadPoolTask:
 - New modules to implement a thread pool pattern.
* pti_log.h
 - fixed harmless warning on log messages of severity "TODO"


2010-10-18  16h23m  aoliveira   antonio.oliveira@withus.pt
* Pti::Thread:
 - return a result code in Thread::start() and Thread::setStackSize()

2010-09-20	14h31m	aoliveira	antonio.oliveira@withus.pt
* Pti::UdpSocket:
 - BUG: fixed memory leak on exit of the UDP socket listener.
 - Added graceful stop of the server. Not working yet.
 - Remove one memory allocation for transmission of replies.
* Pti::Timer:
 - BUG: memory leak on destructor ~Timer()

2010-09-03	14h44m	aoliveira	antonio.oliveira@withus.pt
* Pti::Timer:
 - Re-added exclusive locks on relevent methods()
 - BUG: each call to start() allocated a new timer_t object.
 - Implemented template copy<T>(dest,orig)

2010-09-02	11h04m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
* Pti::Timer:
 - Timer::pause() is now called Timer::stop()
 - Timer::~Timer() now warns if the internal timer failed to delete.

2010-08-17	18h03m	aoliveira	antonio.oliveira@withus.pt
NEW FEATURES:
* Pti::Thread:
 Created static member msSleep and accompanying documentation
 Created static member usSleep and accompanying documentation

2010-08-13	12h20m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
* Pti::Timer:
 Removed the restriction that the timer had to be accessed from a single
 thread. No thread safety mechanism exists, though.

2010-08-11	18h33m	aoliveira	antonio.oliveira@withus.pt
NEW FEATURES:
UdpSocket:
+ Added verbosity control, using UdpSocket::setLogLevel()

2010-08-05	18h03m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
 * udp_socket.h: Define the type CharVector for greater convenience.
 * CMakeLists.txt: By default, build for "Debug" configuration

2010-08-03	18h30m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
 * udpsocket.cpp: minor tweaks. Functionality remains untouched.

2010-07-13	17h06m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
 * xlsignal.h: signal connections and emissions should now be thread-safe.

2010-07-13	16h23m	aoliveira	antonio.oliveira@withus.pt
CHANGES:
 * thread.cpp: threads are created in detached state.
 * thread.cpp: minor cosmetic changes
BUG FIXES:
 * udp_socket.h: the receivedMessage signal, took one vector instead of a
   reference as parameter
 * CMakeLists.txt: custom definitions were not included correctly.
 * CMakeLists.txt: Added debug symbols and profiling information to the build.
 
2010-07-09	15h33m	aoliveira	antonio.oliveira@withus.pt
+ Imported library XL (credits to Abdiel Janulgue)
+ Fixed UdpSocket (should be working fairly well now)
+ Implemented Timer class (tested and working)
+ Removed dependency from cmake.extraconfig. If non-existant, the
  CMakeLists.txt will use default rules for the build.
~ Removed callback from UdpSocket (now implemented as a signal)
~ Removed callback from Timer ( now implemented as a signal)
~ Thread now inherits XL::BaseObject. (Now accepts signal connections)
~ Fixed messages in pti_log with level "TODO"

2010-06-22	11h55m	aoliveira	antonio.oliveira@withus.pt
+ Too many stuff to mention
+ Created class UdpSocket [absolutely untested!!!]

2010-06-22	14h20m	aoliveira	antonio.oliveira@withus.pt
+ Created Changelog.